@using PocIntegracaoNfse.Core.Models.Validation
@inject ISnackbar Snackbar

<MudPaper Elevation="2" Class="pa-6">
    <MudStack Spacing="4">
        <!-- Header -->
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Spacing="1">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                    <MudIcon Icon="@Icon" Color="Color.Primary" Size="Size.Large" />
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.h4">@Title</MudText>
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <MudText Typo="Typo.body1" Color="Color.Secondary">@Subtitle</MudText>
                        }
                    </MudStack>
                    @if (IsLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                    else if (ValidationResult != null)
                    {
                        <MudIcon Icon="@(ValidationResult.IsValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                                 Color="@(ValidationResult.IsValid ? Color.Success : Color.Error)" />
                    }
                </MudStack>
            </MudStack>

            <!-- Botões de Ação -->
            <MudButtonGroup Variant="Variant.Filled">
                <MudButton StartIcon="@Icons.Material.Filled.Save"
                           Color="Color.Primary"
                           OnClick="HandleSave"
                           Disabled="IsLoading">
                    Salvar
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.CheckCircle"
                           Color="Color.Success"
                           OnClick="HandleValidate"
                           Disabled="IsLoading">
                    Validar
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                           Color="Color.Secondary"
                           OnClick="HandleClear"
                           Disabled="IsLoading">
                    Limpar
                </MudButton>
            </MudButtonGroup>
        </MudStack>

        <!-- Alertas de Validação -->
        @if (ValidationResult != null)
        {
            <MudAlert Severity="@(ValidationResult.IsValid ? Severity.Success : Severity.Error)"
                      Class="mb-4">
                <MudText Typo="Typo.h6">
                    @(ValidationResult.IsValid ? "✓ Formulário Válido" : "✗ Formulário Inválido")
                </MudText>
                <MudText>
                    @GetValidationSummary()
                </MudText>
            </MudAlert>

            @if (ValidationResult.Errors.Any())
            {
                <MudExpansionPanels Elevation="2" Rounded="true">
                    <MudExpansionPanel Text="@($"Erros ({ValidationResult.Errors.Count})")"
                                       Icon="@Icons.Material.Filled.Error"
                                       IsExpanded="true">
                        <MudList T="string">
                            @foreach (var error in ValidationResult.Errors)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.Error"
                                             IconColor="Color.Error">
                                    <MudText Typo="Typo.body1">@error</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }

            @if (ValidationResult.Warnings.Any())
            {
                <MudExpansionPanels Elevation="2" Rounded="true">
                    <MudExpansionPanel Text="@($"Avisos ({ValidationResult.Warnings.Count})")"
                                       Icon="@Icons.Material.Filled.Warning">
                        <MudList T="string">
                            @foreach (var warning in ValidationResult.Warnings)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.Warning"
                                             IconColor="Color.Warning">
                                    <MudText Typo="Typo.body1">@warning</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }
        }

        <!-- Conteúdo do Formulário -->
        <MudCard Elevation="1">
            <MudCardContent>
                @ChildContent
            </MudCardContent>
        </MudCard>
    </MudStack>
</MudPaper>

@code {
    [Parameter] public string Title { get; set; } = "Formulário";
    [Parameter] public string? Subtitle { get; set; }
    [Parameter] public string Icon { get; set; } = Icons.Material.Filled.Edit;
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public ValidationResult? ValidationResult { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnValidate { get; set; }
    [Parameter] public EventCallback OnClear { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private async Task HandleSave()
    {
        try
        {
            await OnSave.InvokeAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleValidate()
    {
        try
        {
            await OnValidate.InvokeAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro na validação: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleClear()
    {
        try
        {
            await OnClear.InvokeAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao limpar: {ex.Message}", Severity.Error);
        }
    }

    private string GetValidationSummary()
    {
        if (ValidationResult == null) return "";

        var summary = new List<string>();

        if (ValidationResult.IsValid)
            summary.Add("Todos os campos estão preenchidos corretamente");

        if (ValidationResult.Errors.Any())
            summary.Add($"{ValidationResult.Errors.Count} erro(s) encontrado(s)");

        if (ValidationResult.Warnings.Any())
            summary.Add($"{ValidationResult.Warnings.Count} aviso(s) encontrado(s)");

        return string.Join(". ", summary);
    }
}