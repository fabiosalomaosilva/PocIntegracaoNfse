@using PocIntegracaoNfse.Models.Common
@using PocIntegracaoNfse.Models.Enums
@inject IJSRuntime JSRuntime

<MudGrid>
    <!-- Tipo de Endereço -->
    <MudItem xs="12">
        <MudRadioGroup @bind-SelectedOption="TipoEndereco" T="TipoEnderecoEnum">
            <MudRadio T="TipoEnderecoEnum" Option="TipoEnderecoEnum.Nacional" Color="Color.Primary">
                Endereço Nacional
            </MudRadio>
            <MudRadio T="TipoEnderecoEnum" Option="TipoEnderecoEnum.Exterior" Color="Color.Primary">
                Endereço no Exterior
            </MudRadio>
        </MudRadioGroup>
    </MudItem>

    @if (TipoEndereco == TipoEnderecoEnum.Nacional)
    {
        <!-- CEP -->
        <MudItem xs="12" md="3">
            <MudTextField @bind-Value="CEP"
                          Label="CEP"
                          Placeholder="00000-000"
                          Variant="Variant.Outlined"
                          
                          OnBlur="@OnCEPChange"
                          Validation="@(new Func<string, string?>(ValidateCEP))"
                          Immediate="true" />
        </MudItem>
        <!-- Município -->
        <MudItem xs="12" md="5">
            <MudTextField @bind-Value="CodigoMunicipio"
                          Label="Código Município (IBGE)"
                          Placeholder="0000000"
                          Variant="Variant.Outlined"
                          
                          Required="@IsRequired"
                          Validation="@(new Func<string, string?>(ValidateCodigoMunicipio))"
                          MaxLength="7" />
        </MudItem>
        <!-- UF -->
        <MudItem xs="12" md="4">
            <MudSelect @bind-Value="UF"
                       Label="UF"
                       Variant="Variant.Outlined"
                       
                       Required="@IsRequired">
                @foreach (var uf in Enum.GetValues<UnidadeFederacao>())
                {
                    <MudSelectItem Value="uf">@uf.ToString()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    }
    else
    {
        <!-- País -->
        <MudItem xs="12" md="3">
            <MudTextField @bind-Value="CodigoPais"
                          Label="Código País (ISO)"
                          Placeholder="BR"
                          Variant="Variant.Outlined"
                          
                          Required="@IsRequired"
                          MaxLength="2"
                          Validation="@(new Func<string, string?>(ValidateCodigoPais))" />
        </MudItem>
        <!-- Código Postal -->
        <MudItem xs="12" md="3">
            <MudTextField @bind-Value="CodigoPostal"
                          Label="Código Postal"
                          Placeholder="Código postal do país"
                          Variant="Variant.Outlined"
                          
                          Required="@IsRequired"
                          MaxLength="11" />
        </MudItem>
        <!-- Cidade -->
        <MudItem xs="12" md="3">
            <MudTextField @bind-Value="Cidade"
                          Label="Cidade"
                          Placeholder="Nome da cidade"
                          Variant="Variant.Outlined"
                          
                          Required="@IsRequired"
                          MaxLength="60" />
        </MudItem>
        <!-- Estado/Província -->
        <MudItem xs="12" md="3">
            <MudTextField @bind-Value="EstadoProvincia"
                          Label="Estado/Província"
                          Placeholder="Estado, província ou região"
                          Variant="Variant.Outlined"
                          
                          Required="@IsRequired"
                          MaxLength="60" />
        </MudItem>
    }

    <!-- Logradouro -->
    <MudItem xs="12" md="8">
        <MudTextField @bind-Value="Model.XLgr"
                      Label="Logradouro"
                      Placeholder="Rua, Avenida, Travessa, etc."
                      Variant="Variant.Outlined"
                      
                      Required="@IsRequired"
                      MaxLength="255"
                      Validation="@(new Func<string, string?>(ValidateLogradouro))" />
    </MudItem>
    <!-- Número -->
    <MudItem xs="12" md="4">
        <MudTextField @bind-Value="Model.Nro"
                      Label="Número"
                      Placeholder="123, S/N, etc."
                      Variant="Variant.Outlined"
                      
                      Required="@IsRequired"
                      MaxLength="60"
                      Validation="@(new Func<string, string?>(ValidateNumero))" />
    </MudItem>
    <!-- Complemento -->
    <MudItem xs="12" md="6">
        <MudTextField @bind-Value="Model.XCpl"
                      Label="Complemento"
                      Placeholder="Apto, Sala, Bloco, etc."
                      Variant="Variant.Outlined"
                      
                      MaxLength="156" />
    </MudItem>
    <!-- Bairro -->
    <MudItem xs="12" md="6">
        <MudTextField @bind-Value="Model.XBairro"
                      Label="Bairro"
                      Placeholder="Nome do bairro"
                      Variant="Variant.Outlined"
                      
                      Required="@IsRequired"
                      MaxLength="60"
                      Validation="@(new Func<string, string?>(ValidateBairro))" />
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public EnderecoModel Model { get; set; } = new();

    [Parameter]
    public EventCallback<EnderecoModel> ModelChanged { get; set; }

    [Parameter]
    public bool IsRequired { get; set; } = false;

    private TipoEnderecoEnum _tipoEndereco = TipoEnderecoEnum.Nacional;

    private TipoEnderecoEnum TipoEndereco
    {
        get => _tipoEndereco;
        set
        {
            if (_tipoEndereco != value)
            {
                _tipoEndereco = value;
                ConfigurarTipoEndereco();
                StateHasChanged();
            }
        }
    }

    // Propriedades auxiliares para binding
    private string CEP { get; set; } = string.Empty;
    private string CodigoMunicipio { get; set; } = string.Empty;
    private UnidadeFederacao? UF { get; set; }
    private string CodigoPais { get; set; } = string.Empty;
    private string CodigoPostal { get; set; } = string.Empty;
    private string Cidade { get; set; } = string.Empty;
    private string EstadoProvincia { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        // Determinar tipo baseado no model
        if (Model.EndNac != null)
        {
            TipoEndereco = TipoEnderecoEnum.Nacional;
            CEP = Model.EndNac.CEP ?? string.Empty;
            CodigoMunicipio = Model.EndNac.CMun ?? string.Empty;
        }
        else if (Model.EndExt != null)
        {
            TipoEndereco = TipoEnderecoEnum.Exterior;
            CodigoPais = Model.EndExt.CPais ?? string.Empty;
            CodigoPostal = Model.EndExt.CEndPost ?? string.Empty;
            Cidade = Model.EndExt.XCidade ?? string.Empty;
            EstadoProvincia = Model.EndExt.XEstProvReg ?? string.Empty;
        }
        else
        {
            ConfigurarTipoEndereco();
        }
    }

    private void ConfigurarTipoEndereco()
    {
        if (TipoEndereco == TipoEnderecoEnum.Nacional)
        {
            Model.EndNac = new EnderecoNacionalModel();
            Model.EndExt = null;
        }
        else
        {
            Model.EndExt = new EnderecoExteriorModel();
            Model.EndNac = null;
        }
    }

    private async Task OnCEPChange()
    {
        if (!string.IsNullOrWhiteSpace(CEP) && Model.EndNac != null)
        {
            // Aplicar máscara ao CEP
            var cleanCEP = new string(CEP.Where(char.IsDigit).ToArray());
            if (cleanCEP.Length == 8)
            {
                CEP = $"{cleanCEP.Substring(0, 5)}-{cleanCEP.Substring(5)}";
                Model.EndNac.CEP = cleanCEP;
                // TODO: Integrar com API de CEP para buscar endereço automaticamente
                // await BuscarEnderecoPorCEP(cleanCEP);
                await ModelChanged.InvokeAsync(Model);
                StateHasChanged();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Sincronizar dados do model com propriedades auxiliares
        if (Model.EndNac != null)
        {
            Model.EndNac.CEP = new string(CEP.Where(char.IsDigit).ToArray());
            Model.EndNac.CMun = CodigoMunicipio;
        }
        if (Model.EndExt != null)
        {
            Model.EndExt.CPais = CodigoPais;
            Model.EndExt.CEndPost = CodigoPostal;
            Model.EndExt.XCidade = Cidade;
            Model.EndExt.XEstProvReg = EstadoProvincia;
        }
        await ModelChanged.InvokeAsync(Model);
    }

    // Validações
    private string? ValidateCEP(string cep)
    {
        if (TipoEndereco != TipoEnderecoEnum.Nacional)
            return null;
        if (string.IsNullOrWhiteSpace(cep) && IsRequired)
            return "CEP é obrigatório";
        var digits = new string(cep.Where(char.IsDigit).ToArray());
        if (!string.IsNullOrEmpty(cep) && digits.Length != 8)
            return "CEP deve ter 8 dígitos";
        return null;
    }

    private string? ValidateCodigoMunicipio(string codigo)
    {
        if (TipoEndereco != TipoEnderecoEnum.Nacional)
            return null;
        if (string.IsNullOrWhiteSpace(codigo) && IsRequired)
            return "Código do município é obrigatório";
        if (!string.IsNullOrEmpty(codigo))
        {
            if (codigo.Length != 7 || !codigo.All(char.IsDigit))
                return "Código do município deve ter 7 dígitos";
        }
        return null;
    }

    private string? ValidateCodigoPais(string codigo)
    {
        if (TipoEndereco != TipoEnderecoEnum.Exterior)
            return null;
        if (string.IsNullOrWhiteSpace(codigo) && IsRequired)
            return "Código do país é obrigatório";
        if (!string.IsNullOrEmpty(codigo) && codigo.Length != 2)
            return "Código do país deve ter 2 caracteres";
        return null;
    }

    private string? ValidateLogradouro(string logradouro)
    {
        if (string.IsNullOrWhiteSpace(logradouro) && IsRequired)
            return "Logradouro é obrigatório";
        return null;
    }

    private string? ValidateNumero(string numero)
    {
        if (string.IsNullOrWhiteSpace(numero) && IsRequired)
            return "Número é obrigatório";
        return null;
    }

    private string? ValidateBairro(string bairro)
    {
        if (string.IsNullOrWhiteSpace(bairro) && IsRequired)
            return "Bairro é obrigatório";
        return null;
    }

    private enum TipoEnderecoEnum
    {
        Nacional,
        Exterior
    }
}