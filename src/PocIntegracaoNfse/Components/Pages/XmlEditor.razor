@page "/xml-editor"
@using PocIntegracaoNfse.Components.Forms
@using PocIntegracaoNfse.Core.Models.Validation
@using PocIntegracaoNfse.Models.Common
@using PocIntegracaoNfse.Models.DPS
@using PocIntegracaoNfse.Services
@using ValidationSummary = Microsoft.AspNetCore.Components.Forms.ValidationSummary
@inject XmlService XmlService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Editor XML - NFSe</PageTitle>

<div class="fade-in">
    <MudGrid>
        <!-- Header -->
        <MudItem xs="12">
            <MudCard Class="mb-4">
                <MudCardContent>
                    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <div>
                            <MudText Typo="Typo.h4" Color="Color.Primary">
                                Editor XML NFSe
                            </MudText>
                            <MudText Typo="Typo.body1" Color="Color.Secondary">
                                Crie e edite documentos XML para o Sistema Nacional NFS-e
                            </MudText>
                        </div>
                        <MudButtonGroup Variant="Variant.Outlined">
                            <MudButton StartIcon="@Icons.Material.Filled.Upload" 
                                       Color="Color.Info"
                                       OnClick="OpenImportDialog">
                                Importar XML
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Save" 
                                       Color="Color.Primary"
                                       OnClick="SaveDps"
                                       Disabled="_isLoading">
                                Salvar
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.CheckCircle" 
                                       Color="Color.Success"
                                       OnClick="ValidateDps"
                                       Disabled="_isLoading">
                                Validar
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.Code" 
                                       Color="Color.Secondary"
                                       OnClick="GenerateXml"
                                       Disabled="_isLoading">
                                Gerar XML
                            </MudButton>
                        </MudButtonGroup>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Formulário Principal -->
        <MudItem xs="12" lg="8">
            <DpsForm @bind-Model="_dpsModel"
                     IsLoading="_isLoading"
                     ValidationResult="_validationResult"
                     OnSave="SaveDps"
                     OnValidate="ValidateDps"
                     OnClear="ClearForm" />
        </MudItem>

        <!-- Preview do XML -->
        <MudItem xs="12" lg="4">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Code" Class="mr-2" />
                            Preview XML
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                       Size="Size.Small" 
                                       OnClick="GenerateXml"
                                       Disabled="_isLoading" />
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                       Size="Size.Small" 
                                       OnClick="CopyXmlToClipboard" />
                        <MudIconButton Icon="@Icons.Material.Filled.Download" 
                                       Size="Size.Small" 
                                       OnClick="DownloadXml" />
                        <MudIconButton Icon="@Icons.Material.Filled.Fullscreen" 
                                       Size="Size.Small" 
                                       OnClick="OpenXmlViewer" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pa-2">
                    @if (_isLoading)
                    {
                        <div class="d-flex justify-center pa-4">
                            <MudProgressCircular Indeterminate="true" />
                        </div>
                    }
                    else
                    {
                        <XmlDisplay XmlContent="@_generatedXml" 
                                    Title="XML Gerado"
                                    FileName="dps.xml" />
                    }
                </MudCardContent>
            </MudCard>

            <!-- Status da Validação -->
            @if (_validationResult != null)
            {
                <MudCard Class="mt-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                @if (_validationResult.IsValid)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="mr-2" />
                                    <span>Validação OK</span>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Class="mr-2" />
                                    <span>Validação com Problemas</span>
                                }
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <ValidationSummary Result="_validationResult" />
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>

        <!-- Ações Rápidas -->
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Ações Rápidas</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Row Spacing="2" Wrap="Wrap.Wrap">
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.PlayArrow"
                                   OnClick="QuickTest"
                                   Disabled="_isLoading">
                            Teste Completo
                        </MudButton>
                        
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Info"
                                   StartIcon="@Icons.Material.Filled.Science"
                                   OnClick="LoadSampleData">
                            Dados de Exemplo
                        </MudButton>
                        
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Warning"
                                   StartIcon="@Icons.Material.Filled.RestartAlt"
                                   OnClick="ResetToDefault">
                            Resetar Formulário
                        </MudButton>
                        
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Secondary"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   OnClick="ExportToJson">
                            Exportar JSON
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</div>

<!-- Dialog para Importar XML -->
<MudDialog @bind-IsVisible="_showImportDialog" Options="_dialogOptions">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Importar XML</MudText>
        
        <MudTabs>
            <MudTabPanel Text="Upload de Arquivo">
                <MudFileUpload T="IBrowserFile" Accept=".xml" OnFilesChanged="OnFileUploaded" MaxAllowedSize="10485760">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Selecionar Arquivo XML
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                
                @if (!string.IsNullOrEmpty(_uploadedFileName))
                {
                    <MudText Typo="Typo.body2" Class="mt-2">
                        <MudIcon Icon="@Icons.Material.Filled.AttachFile" Size="Size.Small" Class="mr-1" />
                        Arquivo: @_uploadedFileName
                    </MudText>
                }
            </MudTabPanel>
            
            <MudTabPanel Text="Colar XML">
                <MudTextField @bind-Value="_xmlToImport"
                              Label="Cole o XML aqui"
                              Variant="Variant.Outlined"
                              Lines="10"
                              FullWidth="true"
                              Placeholder="<?xml version='1.0' encoding='UTF-8'?>..." />
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseImportDialog">Cancelar</MudButton>
        <MudButton Color="Color.Primary" 
                   OnClick="ImportXml"
                   Disabled="string.IsNullOrEmpty(_xmlToImport)">
            Importar
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- FAB para ações rápidas -->
<div class="fab-container">
    <MudFab Color="Color.Primary"
           StartIcon="@Icons.Material.Filled.Add"
           OnClick="QuickCreateDps" />
</div>

@code {
    private DpsModel _dpsModel = new();
    private string _generatedXml = "<!-- XML será gerado automaticamente -->";
    private bool _isLoading = false;
    private ValidationResult? _validationResult;
    
    // Dialog de importação
    private bool _showImportDialog = false;
    private string _xmlToImport = string.Empty;
    private string _uploadedFileName = string.Empty;
    
    private readonly DialogOptions _dialogOptions = new() 
    { 
        MaxWidth = MaxWidth.Medium, 
        FullWidth = true,
        CloseButton = true,
        DisableBackdropClick = false
    };

    protected override void OnInitialized()
    {
        InitializeDefaultDps();
    }

    private void InitializeDefaultDps()
    {
        _dpsModel = new DpsModel
        {
            InfDPS = new InfDpsModel
            {
                Id = $"DPS{DateTime.Now:yyyyMMddHHmmss}",
                TpAmb = Models.Enums.TipoAmbiente.Homologacao,
                DhEmi = DateTime.Now,
                VerAplic = "1.00",
                Serie = "00001",
                NDPS = "1",
                DCompet = DateOnly.FromDateTime(DateTime.Now),
                TpEmit = Models.Enums.EmitenteDPS.Prestador,
                CLocEmi = "3542404", // São Paulo como exemplo
                
                Prest = new PrestadorModel
                {
                    CNPJ = "12345678000100",
                    XNome = "Empresa de Exemplo Ltda",
                    RegTrib = new RegimeTributarioModel
                    {
                        OpSimpNac = Models.Enums.SituacaoSimplesNacional.NaoOptante,
                        RegEspTrib = Models.Enums.RegimeEspecialTributacao.Nenhum
                    }
                },
                
                Serv = new ServicoModel
                {
                    LocPrest = new LocalPrestacaoModel
                    {
                        CLocPrestacao = "3542404"
                    },
                    CServ = new CodigoServicoModel
                    {
                        CTribNac = "140101",
                        XDescServ = "Serviços de desenvolvimento de software"
                    }
                },
                
                Valores = new ValoresModel
                {
                    VServPrest = new ValorServicoModel { VServ = 1000.00m },
                    Trib = new TributacaoModel
                    {
                        TribMun = new TributacaoMunicipalModel
                        {
                            TribISSQN = 1,
                            PAliq = 3.00m,
                            TpRetISSQN = 1
                        },
                        TotTrib = new TotalTributosModel
                        {
                            VTotTribFed = 0.00m,
                            VTotTribEst = 0.00m,
                            VTotTribMun = 30.00m
                        }
                    }
                }
            }
        };
    }

    private async Task SaveDps()
    {
        _isLoading = true;
        StateHasChanged();
        
        try
        {
            // Validar antes de salvar
            _validationResult = XmlService.ValidateModel(_dpsModel);
            
            if (_validationResult.IsValid)
            {
                // Simular salvamento
                await Task.Delay(500);
                Snackbar.Add("DPS salva com sucesso!", Severity.Success);
                
                // Gerar XML automaticamente após salvar
                await GenerateXml();
            }
            else
            {
                Snackbar.Add($"Corrija os {_validationResult.Errors.Count} erro(s) antes de salvar", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ValidateDps()
    {
        _isLoading = true;
        StateHasChanged();
        
        try
        {
            _validationResult = XmlService.ValidateModel(_dpsModel);
            
            if (_validationResult.IsValid)
            {
                Snackbar.Add("Validação concluída com sucesso!", Severity.Success);
                if (_validationResult.Warnings.Any())
                {
                    Snackbar.Add($"{_validationResult.Warnings.Count} aviso(s) encontrado(s)", Severity.Info);
                }
            }
            else
            {
                Snackbar.Add($"{_validationResult.Errors.Count} erro(s) encontrado(s)", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro na validação: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateXml()
    {
        _isLoading = true;
        StateHasChanged();
        
        try
        {
            var (xml, validation) = await XmlService.GenerateAndValidateAsync(_dpsModel);
            
            _generatedXml = string.IsNullOrEmpty(xml) ? "<!-- Erro na geração -->" : xml;
            _validationResult = validation;
            
            if (validation.IsValid)
            {
                Snackbar.Add("XML gerado com sucesso!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            _generatedXml = $"<!-- Erro: {ex.Message} -->";
            Snackbar.Add($"Erro ao gerar XML: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ClearForm()
    {
        InitializeDefaultDps();
        _generatedXml = "<!-- XML será gerado automaticamente -->";
        _validationResult = null;
        Snackbar.Add("Formulário limpo", Severity.Info);
        StateHasChanged();
        await Task.CompletedTask;
    }

    // Ações de importação
    private void OpenImportDialog()
    {
        _xmlToImport = string.Empty;
        _uploadedFileName = string.Empty;
        _showImportDialog = true;
    }

    private void CloseImportDialog()
    {
        _showImportDialog = false;
        _xmlToImport = string.Empty;
        _uploadedFileName = string.Empty;
    }

    private async Task OnFileUploaded(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            _uploadedFileName = file.Name;
            
            try
            {
                using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB
                using var reader = new StreamReader(stream);
                _xmlToImport = await reader.ReadToEndAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao ler arquivo: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ImportXml()
    {
        if (string.IsNullOrWhiteSpace(_xmlToImport))
        {
            Snackbar.Add("Nenhum XML para importar", Severity.Warning);
            return;
        }

        _isLoading = true;
        _showImportDialog = false;
        StateHasChanged();
        
        try
        {
            var (model, validation) = await XmlService.ImportAndValidateAsync(_xmlToImport);
            
            if (model != null)
            {
                _dpsModel = model;
                _generatedXml = _xmlToImport; // Mostrar XML importado
                _validationResult = validation;
                
                Snackbar.Add("XML importado com sucesso!", Severity.Success);
                if (validation.Warnings.Any())
                {
                    Snackbar.Add($"{validation.Warnings.Count} aviso(s) na importação", Severity.Info);
                }
            }
            else
            {
                _validationResult = validation;
                Snackbar.Add("Erro na importação do XML", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao importar XML: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    // Ações rápidas
    private async Task QuickTest()
    {
        Snackbar.Add("Iniciando teste completo...", Severity.Info);
        
        await ValidateDps();
        await Task.Delay(500);
        await GenerateXml();
        await Task.Delay(500);
        
        if (_validationResult?.IsValid == true)
        {
            Snackbar.Add("✅ Teste completo finalizado com sucesso!", Severity.Success);
        }
        else
        {
            Snackbar.Add("⚠️ Teste completo finalizado com avisos", Severity.Warning);
        }
    }

    private void LoadSampleData()
    {
        // Carregar dados mais completos de exemplo
        _dpsModel.InfDPS!.Prest.XNome = "Empresa de Tecnologia LTDA";
        _dpsModel.InfDPS.Prest.IM = "123456789";
        _dpsModel.InfDPS.Prest.Fone = "(11) 99999-9999";
        _dpsModel.InfDPS.Prest.Email = "contato@empresa.com.br";
        
        // Adicionar tomador
        _dpsModel.InfDPS.Toma = new TomadorModel
        {
            CNPJ = "98765432000199",
            XNome = "Cliente Exemplo S.A.",
            Email = "cliente@exemplo.com.br"
        };
        
        // Melhorar descrição do serviço
        _dpsModel.InfDPS.Serv.CServ.XDescServ = "Desenvolvimento de sistema web customizado com tecnologia .NET 9, incluindo frontend em Blazor, backend com Entity Framework e banco de dados SQL Server. Projeto inclui análise de requisitos, desenvolvimento, testes e implantação.";
        
        Snackbar.Add("Dados de exemplo carregados", Severity.Info);
        StateHasChanged();
    }

    private void ResetToDefault()
    {
        InitializeDefaultDps();
        _generatedXml = "<!-- XML será gerado automaticamente -->";
        _validationResult = null;
        Snackbar.Add("Formulário resetado para valores padrão", Severity.Info);
        StateHasChanged();
    }

    private async Task ExportToJson()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(_dpsModel, new System.Text.Json.JsonSerializerOptions 
            { 
                WriteIndented = true,
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
            });
            
            var bytes = System.Text.Encoding.UTF8.GetBytes(json);
            var base64 = Convert.ToBase64String(bytes);
            
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", base64, "dps-model.json", "application/json");
            Snackbar.Add("JSON exportado com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao exportar JSON: {ex.Message}", Severity.Error);
        }
    }

    private async Task CopyXmlToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _generatedXml);
            Snackbar.Add("XML copiado para a área de transferência", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao copiar XML: {ex.Message}", Severity.Error);
        }
    }

    private async Task DownloadXml()
    {
        try
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(_generatedXml);
            var base64 = Convert.ToBase64String(bytes);
            var fileName = $"DPS_{_dpsModel.InfDPS?.Serie}_{_dpsModel.InfDPS?.NDPS}_{DateTime.Now:yyyyMMdd}.xml";
            
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", base64, fileName, "application/xml");
            Snackbar.Add("XML baixado com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao baixar XML: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenXmlViewer()
    {
        await JSRuntime.InvokeVoidAsync("open", "/xml-viewer", "_blank");
    }

    private async Task QuickCreateDps()
    {
        // Ação do FAB - criar nova DPS rapidamente
        ResetToDefault();
        
        // Gerar ID único
        _dpsModel.InfDPS!.Id = $"DPS{DateTime.Now:yyyyMMddHHmmssff}";
        _dpsModel.InfDPS.NDPS = DateTime.Now.ToString("HHmmss");
        
        Snackbar.Add("Nova DPS criada", Severity.Info);
        StateHasChanged();
        await Task.CompletedTask;
    }
}