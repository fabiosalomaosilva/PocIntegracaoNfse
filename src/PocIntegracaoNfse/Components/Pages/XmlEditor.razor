@page "/xml-editor"
@using PocIntegracaoNfse.Models.DPS
@using PocIntegracaoNfse.Models.NFSe
@using PocIntegracaoNfse.Core.Services
@using PocIntegracaoNfse.Core.Models.Validation
@using PocIntegracaoNfse.Components.Forms
@using MudBlazor
@using PocIntegracaoNfse.Models.Enums
@inject XmlGeneratorService XmlGenerator
@inject XmlValidationService XmlValidator
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Editor XML NFSe</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Elevation="2" Class="pa-6">
        <MudStack Spacing="4">
            <!-- Header -->
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudStack Spacing="1">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                        <MudText Typo="Typo.h4">Editor XML NFSe</MudText>
                        @if (IsLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        }
                        else if (ValidationResult != null)
                        {
                            <MudIcon Icon="@(ValidationResult.IsValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                                     Color="@(ValidationResult.IsValid ? Color.Success : Color.Error)" />
                        }
                    </MudStack>
                    <MudText Typo="Typo.body1" Color="Color.Secondary">
                        Crie e edite documentos DPS e NFSe com validação automática
                    </MudText>
                    @if (!string.IsNullOrEmpty(GeneratedXml))
                    {
                        <MudChip Icon="@Icons.Material.Filled.Code"
                                 Color="Color.Info"
                                 Size="Size.Small" T="string">
                            XML Gerado (@(SelectedDocumentType))
                        </MudChip>
                    }
                </MudStack>

                <!-- Botões de Ação -->
                <MudButtonGroup Variant="Variant.Filled">
                    <MudButton StartIcon="@Icons.Material.Filled.Save"
                               Color="Color.Primary"
                               OnClick="SaveDocument"
                               Disabled="IsLoading">
                        Salvar
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.CheckCircle"
                               Color="Color.Success"
                               OnClick="ValidateDocument"
                               Disabled="IsLoading">
                        Validar
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                               Color="Color.Secondary"
                               OnClick="ClearDocument"
                               Disabled="IsLoading">
                        Limpar
                    </MudButton>
                    @if (!string.IsNullOrEmpty(GeneratedXml))
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.Visibility"
                                   Color="Color.Info"
                                   OnClick="OpenXmlViewer"
                                   Disabled="IsLoading">
                            Visualizar
                        </MudButton>
                    }
                </MudButtonGroup>
            </MudStack>

            <!-- Estatísticas Rápidas -->
            @if (ValidationResult != null || !string.IsNullOrEmpty(GeneratedXml))
            {
                <MudCard Elevation="0" Class="mt-4">
                    <MudCardContent Class="py-2">
                        <MudStack Row Justify="Justify.SpaceAround" AlignItems="AlignItems.Center">
                            @if (!string.IsNullOrEmpty(GeneratedXml))
                            {
                                <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Code" Color="Color.Primary" />
                                    <MudText Typo="Typo.caption">XML Gerado</MudText>
                                    <MudText Typo="Typo.body2">@SelectedDocumentType</MudText>
                                </MudStack>
                            }

                            @if (ValidationResult != null)
                            {
                                <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@(ValidationResult.IsValid ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                                             Color="@(ValidationResult.IsValid ? Color.Success : Color.Error)" />
                                    <MudText Typo="Typo.caption">Status</MudText>
                                    <MudText Typo="Typo.body2">@(ValidationResult.IsValid ? "Válido" : "Inválido")</MudText>
                                </MudStack>

                                @if (ValidationResult.Errors.Any())
                                {
                                    <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                        <MudText Typo="Typo.caption">Erros</MudText>
                                        <MudText Typo="Typo.body2">@ValidationResult.Errors.Count</MudText>
                                    </MudStack>
                                }

                                @if (ValidationResult.Warnings.Any())
                                {
                                    <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                                        <MudText Typo="Typo.caption">Avisos</MudText>
                                        <MudText Typo="Typo.body2">@ValidationResult.Warnings.Count</MudText>
                                    </MudStack>
                                }
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            }

            <!-- Tipo de Documento -->
            <MudCard Elevation="1">
                <MudCardContent>
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="4" Justify="Justify.SpaceBetween">
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="4">
                            <MudText Typo="Typo.h6">Tipo de Documento:</MudText>
                            <MudRadioGroup @bind-SelectedOption="SelectedDocumentType" T="string">
                                <MudRadio Option="@("DPS")" T="string">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Assignment" Color="Color.Primary" />
                                        <MudText>DPS - Declaração de Prestação de Serviços</MudText>
                                    </MudStack>
                                </MudRadio>
                                <MudRadio Option="@("NFSe")" T="string">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Receipt" Color="Color.Success" />
                                        <MudText>NFSe - Nota Fiscal de Serviços Eletrônica</MudText>
                                    </MudStack>
                                </MudRadio>
                            </MudRadioGroup>
                        </MudStack>

                        <!-- Ações de Importação -->
                        <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                            <MudButton StartIcon="@Icons.Material.Filled.Upload"
                                       OnClick="ImportXml"
                                       Disabled="IsLoading">
                                Importar XML
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Filled.FileOpen"
                                       OnClick="LoadSample"
                                       Disabled="IsLoading">
                                Exemplo
                            </MudButton>
                        </MudButtonGroup>
                    </MudStack>
                </MudCardContent>
            </MudCard>

            <!-- Conteúdo Principal - Tabs -->
            <MudTabs Elevation="4"
                     Rounded="true"
                     PanelClass="mud-height-full"
                     Color="Color.Primary"
                     SliderColor="Color.Primary"
                     ActivePanelIndex="GetActiveTabIndex()">

                <!-- Tab DPS -->
                <MudTabPanel Text="DPS"
                             Icon="@Icons.Material.Filled.Assignment"
                             ToolTip="Declaração de Prestação de Serviços"
                             BadgeData="@(SelectedDocumentType == "DPS" ? "●" : null)"
                             BadgeColor="Color.Success">
                    <div class="pa-4">
                        @if (SelectedDocumentType == "DPS")
                        {
                            <DpsForm @bind-Model="DpsModel"
                                     IsLoading="IsLoading"
                                     ValidationResult="ValidationResult"
                                     OnSave="HandleDpsSave"
                                     OnValidate="HandleDpsValidate"
                                     OnClear="HandleDpsClear" />
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Class="mb-4">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                                    <MudText>Selecione "DPS" no tipo de documento para começar a editar.</MudText>
                                </MudStack>
                            </MudAlert>
                        }
                    </div>
                </MudTabPanel>

                <!-- Tab NFSe -->
                <MudTabPanel Text="NFSe"
                             Icon="@Icons.Material.Filled.Receipt"
                             ToolTip="Nota Fiscal de Serviços Eletrônica"
                             BadgeData="@(SelectedDocumentType == "NFSe" ? "●" : null)"
                             BadgeColor="Color.Success">
                    <div class="pa-4">
                        @if (SelectedDocumentType == "NFSe")
                        {
                            <NfseForm @bind-Model="NfseModel"
                                      IsLoading="IsLoading"
                                      ValidationResult="ValidationResult"
                                      OnSave="HandleNfseSave"
                                      OnValidate="HandleNfseValidate"
                                      OnClear="HandleNfseClear" />
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Class="mb-4">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                                    <MudText>Selecione "NFSe" no tipo de documento para começar a editar.</MudText>
                                </MudStack>
                            </MudAlert>
                        }
                    </div>
                </MudTabPanel>

                <!-- Tab XML Gerado -->
                <MudTabPanel Text="XML Gerado" Icon="@Icons.Material.Filled.Code">
                    <div class="pa-4">
                        <MudStack Spacing="3">
                            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.h6">XML Gerado</MudText>
                                <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small">
                                    <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                                               OnClick="GenerateXml"
                                               Disabled="IsLoading">
                                        Gerar XML
                                    </MudButton>
                                    <MudButton StartIcon="@Icons.Material.Filled.Download"
                                               OnClick="DownloadXml"
                                               Disabled="string.IsNullOrEmpty(GeneratedXml)">
                                        Download
                                    </MudButton>
                                    <MudButton StartIcon="@Icons.Material.Filled.ContentCopy"
                                               OnClick="CopyXmlToClipboard"
                                               Disabled="string.IsNullOrEmpty(GeneratedXml)">
                                        Copiar
                                    </MudButton>
                                </MudButtonGroup>
                            </MudStack>

                            @if (IsLoading)
                            {
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" />
                            }
                            else if (!string.IsNullOrEmpty(GeneratedXml))
                            {
                                <MudCard Elevation="2">
                                    <MudCardContent>
                                        <MudTextField @bind-Value="GeneratedXml"
                                                      Variant="Variant.Outlined"
                                                      Lines="20"
                                                      ReadOnly="true"
                                                      FullWidth="true"
                                                      Class="xml-display"
                                                      HelperText="XML gerado automaticamente" />
                                    </MudCardContent>
                                </MudCard>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info">
                                    <MudText>Preencha os dados nos formulários e clique em "Gerar XML" para visualizar o resultado.</MudText>
                                </MudAlert>
                            }
                        </MudStack>
                    </div>
                </MudTabPanel>

                <!-- Tab Validação -->
                <MudTabPanel Text="Validação" Icon="@Icons.Material.Filled.CheckCircle">
                    <div class="pa-4">
                        <MudStack Spacing="3">
                            @if (ValidationResult != null)
                            {
                                <MudAlert Severity="@(ValidationResult.IsValid ? Severity.Success : Severity.Error)"
                                          Class="mb-4">
                                    <MudText Typo="Typo.h6">
                                        @(ValidationResult.IsValid ? "✓ Documento Válido" : "✗ Documento Inválido")
                                    </MudText>
                                    <MudText>
                                        @GetValidationSummary()
                                    </MudText>
                                </MudAlert>

                                @if (ValidationResult.Errors.Any())
                                {
                                    <MudExpansionPanels Elevation="2" Rounded="true">
                                        <MudExpansionPanel Text="@($"Erros ({ValidationResult.Errors.Count})")"
                                                           Icon="@Icons.Material.Filled.Error"
                                                           IsExpanded="true">
                                            <MudList T="string">
                                                @foreach (var error in ValidationResult.Errors)
                                                {
                                                    <MudListItem Icon="@Icons.Material.Filled.Error"
                                                                 IconColor="Color.Error">
                                                        <MudText Typo="Typo.body1">@error</MudText>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                }

                                @if (ValidationResult.Warnings.Any())
                                {
                                    <MudExpansionPanels Elevation="2" Rounded="true">
                                        <MudExpansionPanel Text="@($"Avisos ({ValidationResult.Warnings.Count})")"
                                                           Icon="@Icons.Material.Filled.Warning">
                                            <MudList T="string">
                                                @foreach (var warning in ValidationResult.Warnings)
                                                {
                                                    <MudListItem Icon="@Icons.Material.Filled.Warning"
                                                                 IconColor="Color.Warning">
                                                        <MudText Typo="Typo.body1">@warning</MudText>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        </MudExpansionPanel>
                                    </MudExpansionPanels>
                                }
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info">
                                    <MudText>Clique em "Validar" para verificar a conformidade do documento.</MudText>
                                </MudAlert>
                            }
                        </MudStack>
                    </div>
                </MudTabPanel>
            </MudTabs>
        </MudStack>
    </MudPaper>
</MudContainer>

<style>
    .xml-display .mud-input-control-input-container textarea {
        font-family: 'Courier New', monospace;
        font-size: 12px;
        line-height: 1.4;
    }

    .form-section {
        padding: 16px;
        border-radius: 8px;
        background-color: var(--mud-palette-background-grey);
    }

    .mud-tabs .mud-tab-panel {
        min-height: 500px;
    }
</style>

@code {
    private string SelectedDocumentType { get; set; } = "DPS";
    private bool IsLoading { get; set; }
    private string GeneratedXml { get; set; } = string.Empty;
    private ValidationResult? ValidationResult { get; set; }

    // Models
    private DpsModel DpsModel { get; set; } = new();
    private NfseModel NfseModel { get; set; } = new();

    protected override void OnInitialized()
    {
        InitializeDefaultData();
    }

    private void InitializeDefaultData()
    {
        // Inicializar DPS com dados básicos
        DpsModel.InfDPS.Serie = "001";
        DpsModel.InfDPS.NDPS = "1";
        DpsModel.InfDPS.TpAmb = TipoAmbiente.Homologacao;
        DpsModel.InfDPS.DhEmi = DateTime.Now;
        DpsModel.InfDPS.DCompet = DateOnly.FromDateTime(DateTime.Now);
        DpsModel.InfDPS.VerAplic = "1.0.0";
        DpsModel.InfDPS.TpEmit = EmitenteDPS.Prestador;
        DpsModel.InfDPS.CLocEmi = "3304557"; // Rio de Janeiro como padrão

        // Inicializar NFSe com dados básicos
        NfseModel.InfNFSe.NNFSe = "1";
        NfseModel.InfNFSe.Id = "ABC123";
        NfseModel.InfNFSe.DhProc = DateTime.Now;
    }

    private int GetActiveTabIndex()
    {
        return SelectedDocumentType switch
        {
            "DPS" => 0,
            "NFSe" => 1,
            _ => 0
        };
    }

    #region Document Actions

    private async Task SaveDocument()
    {
        IsLoading = true;
        try
        {
            await GenerateXml();
            Snackbar.Add($"{SelectedDocumentType} salvo com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task ValidateDocument()
    {
        IsLoading = true;
        try
        {
            if (string.IsNullOrEmpty(GeneratedXml))
            {
                await GenerateXml();
            }

            if (!string.IsNullOrEmpty(GeneratedXml))
            {
                ValidationResult = await XmlValidator.ValidateAsync(GeneratedXml);
                var message = ValidationResult.IsValid
                    ? "Documento validado com sucesso!"
                    : $"Validação encontrou {ValidationResult.Errors.Count} erro(s)";

                var severity = ValidationResult.IsValid ? Severity.Success : Severity.Warning;
                Snackbar.Add(message, severity);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro na validação: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ClearDocument()
    {
        GeneratedXml = string.Empty;
        ValidationResult = null;
        InitializeDefaultData();
        Snackbar.Add("Documento limpo", Severity.Info);
    }

    private async Task GenerateXml()
    {
        IsLoading = true;
        try
        {
            if (SelectedDocumentType == "DPS")
            {
                GeneratedXml = await XmlGenerator.GenerateXmlAsync(DpsModel);
            }
            else if (SelectedDocumentType == "NFSe")
            {
                GeneratedXml = await XmlGenerator.GenerateNfseXmlAsync(NfseModel);
            }

            Snackbar.Add($"XML {SelectedDocumentType} gerado com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao gerar XML: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    #endregion

    #region DPS Event Handlers

    private async Task HandleDpsSave(DpsModel model)
    {
        IsLoading = true;
        try
        {
            DpsModel = model;
            await GenerateXml();
            Snackbar.Add("DPS salvo com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar DPS: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleDpsValidate(DpsModel model)
    {
        IsLoading = true;
        try
        {
            DpsModel = model;
            var xml = await XmlGenerator.GenerateXmlAsync(model);
            GeneratedXml = xml;

            ValidationResult = await XmlValidator.ValidateAsync(xml);

            var message = ValidationResult.IsValid
                ? "DPS validado com sucesso!"
                : $"DPS possui {ValidationResult.Errors.Count} erro(s)";

            var severity = ValidationResult.IsValid ? Severity.Success : Severity.Warning;
            Snackbar.Add(message, severity);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro na validação DPS: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void HandleDpsClear()
    {
        DpsModel = new DpsModel();
        InitializeDefaultData();
        GeneratedXml = string.Empty;
        ValidationResult = null;
        Snackbar.Add("DPS limpo", Severity.Info);
        StateHasChanged();
    }

    #endregion

    #region NFSe Event Handlers

    private async Task HandleNfseSave(NfseModel model)
    {
        IsLoading = true;
        try
        {
            NfseModel = model;
            await GenerateXml();
            Snackbar.Add("NFSe salvo com sucesso!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar NFSe: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleNfseValidate(NfseModel model)
    {
        IsLoading = true;
        try
        {
            NfseModel = model;
            var xml = await XmlGenerator.GenerateNfseXmlAsync(model);
            GeneratedXml = xml;

            ValidationResult = await XmlValidator.ValidateAsync(xml);

            var message = ValidationResult.IsValid
                ? "NFSe validado com sucesso!"
                : $"NFSe possui {ValidationResult.Errors.Count} erro(s)";

            var severity = ValidationResult.IsValid ? Severity.Success : Severity.Warning;
            Snackbar.Add(message, severity);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro na validação NFSe: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void HandleNfseClear()
    {
        NfseModel = new NfseModel();
        InitializeDefaultData();
        GeneratedXml = string.Empty;
        ValidationResult = null;
        Snackbar.Add("NFSe limpo", Severity.Info);
        StateHasChanged();
    }

    #endregion

    #region Import/Export Actions

    private void ImportXml()
    {
        try
        {
            // TODO: Implementar importação de arquivo
            Snackbar.Add("Funcionalidade de importação em desenvolvimento", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao importar: {ex.Message}", Severity.Error);
        }
    }

    private void LoadSample()
    {
        try
        {
            if (SelectedDocumentType == "DPS")
            {
                // Carregar dados de exemplo para DPS
                DpsModel.InfDPS.Serie = "001";
                DpsModel.InfDPS.NDPS = "123";
                DpsModel.InfDPS.TpAmb = TipoAmbiente.Homologacao;
                DpsModel.InfDPS.DhEmi = DateTime.Now;
                DpsModel.InfDPS.DCompet = DateOnly.FromDateTime(DateTime.Now);
                DpsModel.InfDPS.VerAplic = "1.0.0";
                DpsModel.InfDPS.TpEmit = EmitenteDPS.Prestador;
                DpsModel.InfDPS.CLocEmi = "3304557";

                // Dados do prestador de exemplo
                DpsModel.InfDPS.Prest.CNPJ = "12.345.678/0001-90";
                DpsModel.InfDPS.Prest.XNome = "Empresa de Exemplo LTDA";

                // Dados do serviço de exemplo
                DpsModel.InfDPS.Serv.LocPrest.CLocPrestacao = "123456";
                DpsModel.InfDPS.Serv.CServ.XDescServ = "Serviços de consultoria em tecnologia da informação";
                DpsModel.InfDPS.Serv.CServ.CTribNac = "3304557";

                // Valores de exemplo
                DpsModel.InfDPS.Valores.VServPrest.VServ = 1000.00m;
                DpsModel.InfDPS.Valores.Trib.TribMun.PAliq = 2.00m;
            }
            else
            {
                // Carregar dados de exemplo para NFSe
                NfseModel.InfNFSe.NNFSe = "456";
                NfseModel.InfNFSe.NDFSe = "XYZ789";
                NfseModel.InfNFSe.DhProc = DateTime.Now;
            }

            Snackbar.Add($"Dados de exemplo carregados para {SelectedDocumentType}", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar exemplo: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenXmlViewer()
    {
        try
        {
            Snackbar.Add("Redirecionando para visualizador...", Severity.Info);
            await JSRuntime.InvokeVoidAsync("open", "/xml-viewer", "_blank");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao abrir visualizador: {ex.Message}", Severity.Error);
        }
    }

    private async Task DownloadXml()
    {
        try
        {
            if (!string.IsNullOrEmpty(GeneratedXml))
            {
                var fileName = $"{SelectedDocumentType}_{DateTime.Now:yyyyMMdd_HHmmss}.xml";
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, GeneratedXml, "application/xml");
                Snackbar.Add("Download iniciado", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro no download: {ex.Message}", Severity.Error);
        }
    }

    private async Task CopyXmlToClipboard()
    {
        try
        {
            if (!string.IsNullOrEmpty(GeneratedXml))
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GeneratedXml);
                Snackbar.Add("XML copiado para a área de transferência", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao copiar: {ex.Message}", Severity.Error);
        }
    }

    #endregion

    #region Helper Methods

    private string GetValidationSummary()
    {
        if (ValidationResult == null) return "";

        var summary = new List<string>();

        if (ValidationResult.IsValid)
            summary.Add("Documento está em conformidade com os schemas XSD");

        if (ValidationResult.Errors.Any())
            summary.Add($"{ValidationResult.Errors.Count} erro(s) encontrado(s)");

        if (ValidationResult.Warnings.Any())
            summary.Add($"{ValidationResult.Warnings.Count} aviso(s) encontrado(s)");

        return string.Join(". ", summary);
    }

    #endregion
}